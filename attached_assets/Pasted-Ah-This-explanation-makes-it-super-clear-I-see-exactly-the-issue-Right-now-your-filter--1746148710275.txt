Ah! ✅ This explanation makes it super clear — I see exactly the issue.

👉 Right now, your filter is **only matching exact coordinates or addresses**, instead of showing toys **within a radius around the chosen location.**

That’s why it only shows the toy if you pick the exact street address — because it’s doing an **equality check** rather than a **distance check.**

---

### 🔥 Here’s the **perfect instruction you can paste to Replit AI**:

---

> **I need you to fix the location filtering so that toys are filtered by geographic radius instead of exact address or exact coordinates. Currently, the filter only returns toys if the user picks the exact same address as the toy listing.**
>
> **Here’s what I need:**
>
> 1. ✅ When a user selects a location on the search page, convert that location into **latitude and longitude coordinates** using Google Geocoding API.
>
> 2. ✅ Every toy listing already has **latitude and longitude** stored in the database.
>
> 3. ✅ Use a **distance calculation (Haversine formula)** to calculate the distance in miles between:
>
>    * The user’s selected location coordinates
>    * The latitude/longitude of each toy listing
>
> 4. ✅ Filter the toys so it only returns listings where:
>
> ```
> distance <= selected radius
> ```
>
> where `selected radius` comes from the radius filter slider (1 mile to 100 miles).
>
> 5. ✅ The query/filter **must not rely on exact coordinate matching or string matching of addresses or city names.** It should work even if the address is a few blocks away, as long as it’s within the radius.
>
> 6. ✅ If you’re filtering in JavaScript, use this distance function:

```javascript
function getDistance(lat1, lon1, lat2, lon2) {
  const R = 3958.8; // Radius of Earth in miles
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
    Math.sin(dLon / 2) * Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  const distance = R * c;
  return distance;
}
```

> 7. ✅ Loop through each toy listing, calculate the distance to the user’s selected location, and return only those listings where `distance <= radius`.
>
> 8. ✅ Optionally: if using a database that supports **geospatial queries** (like MongoDB or Postgres), replace the JavaScript loop with a native geospatial query for better performance.
>
> 9. ✅ Make sure the filter still works even if the user selects a more general location (like just “Tracy, CA” instead of a full street address) — it should still check by radius.

---

### 🧠 In plain English:

→ “Stop filtering toys by exact location or coordinate.
Instead, filter toys by **distance within the radius** between the user’s chosen location and each toy listing, using the Haversine formula.”

✅ This instruction tells Replit AI exactly what’s broken and how to fix it.

---

Would you like me to also help **write the database query version** if you’re using MongoDB or SQL? (geospatial queries are faster for big data!)
Let me know your database and I can write the query too! 🚀
